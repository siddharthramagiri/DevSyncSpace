datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  image     String?
  createdAt DateTime @default(now())

  teams           TeamMember[]
  tasks           Task[] // tasks assigned to this user
  meetings        Meeting[]    @relation("UserMeetings")
  createdMeetings Meeting[]    @relation("CreatedMeetings")
  createdEvents   Event[]      @relation("CreatedEvents")
  ledTeams        Team[]       @relation("LedTeams")
}

model Team {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  leaderId  String

  leader   User         @relation("LedTeams", fields: [leaderId], references: [id], onDelete: Cascade)
  members  TeamMember[]
  projects Project[]
}

model TeamMember {
  id     String @id @default(cuid())
  userId String
  teamId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId]) // prevent duplicate memberships
}

model Project {
  id          String  @id @default(cuid())
  title       String
  description String?
  githubUrl   String?
  teamId      String

  team  Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  tasks Task[]
}

model Task {
  id           String     @id @default(cuid())
  title        String
  description  String?
  status       TaskStatus @default(PENDING)
  dueDate      DateTime?
  projectId    String
  assignedToId String?

  project    Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignedTo User?   @relation(fields: [assignedToId], references: [id], onDelete: SetNull)
}

model Meeting {
  id        String   @id @default(cuid())
  topic     String
  roomId    String   @unique
  scheduled DateTime
  createdBy String

  creator   User   @relation("CreatedMeetings", fields: [createdBy], references: [id], onDelete: Cascade)
  attendees User[] @relation("UserMeetings")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  scheduledAt DateTime
  createdById String

  creator User @relation("CreatedEvents", fields: [createdById], references: [id], onDelete: Cascade)
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}
